// Supabase Edge Function for AI Image Generation
// Deploy this to Supabase Functions

import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const { bookId, childImageUrl, childName, userId } = await req.json()
    
    if (!bookId || !childImageUrl || !childName || !userId) {
      throw new Error('Missing required parameters')
    }

    // Initialize Supabase client
    const supabaseUrl = Deno.env.get('SUPABASE_URL')
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')
    if (!supabaseUrl || !supabaseServiceKey) {
      throw new Error('Missing Supabase environment variables')
    }
    const supabase = createClient(supabaseUrl, supabaseServiceKey)

    // Update status to processing
    await supabase
      .from('ai_generation_queue')
      .update({ 
        status: 'processing',
        started_at: new Date().toISOString()
      })
      .eq('user_id', userId)
      .eq('book_id', bookId)

    // Get book details
    const { data: book } = await supabase
      .from('books')
      .select('cover_image_url, title')
      .eq('id', bookId)
      .single()

    if (!book) {
      throw new Error('Book not found')
    }

    // Download images
    console.log('Downloading cover image:', book.cover_image_url)
    const coverResponse = await fetch(book.cover_image_url)
    const coverBuffer = await coverResponse.arrayBuffer()

    console.log('Downloading child image:', childImageUrl)
    const childResponse = await fetch(childImageUrl)
    const childBuffer = await childResponse.arrayBuffer()

    // Call Gemini AI
    const geminiApiKey = Deno.env.get('GEMINI_API_KEY')
    if (!geminiApiKey) {
      throw new Error('Missing Gemini API key')
    }
    const prompt = `Replace the kids face in the book cover with the attached reference image. Keep the face, hairstyle, features, and camera angle exactly the same as in the reference image without any changes. The background and context must remain unchanged, and the final image should look perfectly realistic and clearly identifiable as the same kid, and even there is a text change that text into ${childName} into lofingo keep face 100% same.`

    console.log('Calling Gemini AI...')
    const aiResponse = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-image-preview:generateContent?key=${geminiApiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [
            {
              inline_data: {
                mime_type: 'image/png',
                data: btoa(String.fromCharCode(...new Uint8Array(coverBuffer)))
              }
            },
            {
              inline_data: {
                mime_type: 'image/png', 
                data: btoa(String.fromCharCode(...new Uint8Array(childBuffer)))
              }
            },
            {
              text: prompt
            }
          ]
        }]
      })
    })

    const aiResult = await aiResponse.json()
    
    if (!aiResult.candidates?.[0]?.content?.parts) {
      throw new Error('No image generated by AI')
    }

    // Find the generated image
    let generatedImageData = null
    for (const part of aiResult.candidates[0].content.parts) {
      if (part.inline_data?.data) {
        generatedImageData = part.inline_data.data
        break
      }
    }

    if (!generatedImageData) {
      throw new Error('No image data in AI response')
    }

    // Upload generated image to Supabase Storage
    const imageBuffer = Uint8Array.from(atob(generatedImageData), c => c.charCodeAt(0))
    const fileName = `generated/${userId}/${bookId}_${Date.now()}.png`
    
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('generated-covers')
      .upload(fileName, imageBuffer, {
        contentType: 'image/png'
      })

    if (uploadError) {
      throw uploadError
    }

    // Get public URL
    const { data: urlData } = supabase.storage
      .from('generated-covers')
      .getPublicUrl(fileName)

    // Update database with result
    await supabase
      .from('ai_generation_queue')
      .update({
        status: 'completed',
        generated_image_url: urlData.publicUrl,
        completed_at: new Date().toISOString()
      })
      .eq('user_id', userId)
      .eq('book_id', bookId)

    console.log('AI generation completed successfully')

    return new Response(
      JSON.stringify({ 
        success: true, 
        generated_image_url: urlData.publicUrl 
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    )

  } catch (error) {
    console.error('AI generation failed:', error)
    
    // Update status to failed if we have the parameters
    const body = await req.json().catch(() => ({}))
    if (body.userId && body.bookId) {
      const supabase = createClient(
        Deno.env.get('SUPABASE_URL'),
        Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')
      )
      
      await supabase
        .from('ai_generation_queue')
        .update({
          status: 'failed',
          error_message: error.message,
          completed_at: new Date().toISOString()
        })
        .eq('user_id', body.userId)
        .eq('book_id', body.bookId)
    }

    return new Response(
      JSON.stringify({ error: error.message }),
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    )
  }
})
